name: 🚀 Deploy to Easypanel

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  # Testes automatizados
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: 📦 Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        
    - name: 🔧 Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        
    - name: 🧪 Run backend tests
      run: |
        cd backend
        python -m pytest tests/ -v || echo "No tests found, skipping..."
        
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📦 Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: 🔍 Frontend lint and type check
      run: |
        cd frontend
        npm run lint
        npm run type-check
        
    - name: 🏗️ Test frontend build
      run: |
        cd frontend
        npm run build

  # Build e Deploy
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped') && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏷️ Extract metadata for Backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏷️ Extract metadata for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🐳 Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🌐 Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🚀 Deploy to Easypanel via Webhook
      if: github.ref == 'refs/heads/main'
      run: |
        curl -X POST "${{ secrets.EASYPANEL_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "service": "shopflow",
            "action": "deploy",
            "images": {
              "backend": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest",
              "frontend": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest"
            },
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}"
          }'

    - name: 📊 Update deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
          echo "🔗 Backend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest"
          echo "🔗 Frontend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi

  # Notificações
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📢 Notify Slack (Success)
      if: needs.build-and-deploy.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          🎉 ShopFlow deployment successful!
          
          📝 Commit: ${{ github.event.head_commit.message }}
          🔗 Author: ${{ github.actor }}
          🌿 Branch: ${{ github.ref_name }}
          📊 Images built and deployed to Easypanel
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: 📢 Notify Slack (Failure)
      if: needs.build-and-deploy.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ❌ ShopFlow deployment failed!
          
          📝 Commit: ${{ github.event.head_commit.message }}
          🔗 Author: ${{ github.actor }}
          🌿 Branch: ${{ github.ref_name }}
          🚨 Please check the logs
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}